(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function [GP_Inline]  in_range (x : int) requires { True } ensures 
    { True } returns
     = (([GP_Pretty_Ada:-1] (first <= x)) /\ ([GP_Pretty_Ada:-2] (x <= last)))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function [GP_Inline]  in_range (x : int) requires { True } ensures 
    { True } returns
     = (([GP_Pretty_Ada:-1] (first <= x)) /\ ([GP_Pretty_Ada:-2] (x <= last)))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function [GP_Inline]  in_range (x : int) requires { True } ensures 
    { True } returns
     = (([GP_Pretty_Ada:-1] (first <= x)) /\ ([GP_Pretty_Ada:-2] (x <= last)))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = Standard__character.character
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              ( forall ([mlw:proxy_symbol] [introduced] temp___idx_105) : int
              [].(if
                 ((a__first <= ([mlw:proxy_symbol]
                     [introduced] temp___idx_105)) /\
                    (([mlw:proxy_symbol] [introduced] temp___idx_105)
                       <= a__last))
                 then
                 ((Standard__character__rep.to_rep
                     (get a ([mlw:proxy_symbol] [introduced] temp___idx_105)))
                    = (Standard__character__rep.to_rep
                         (get b
                            ((b__first - a__first) + ([mlw:proxy_symbol]
                               [introduced] temp___idx_105)))))
                 )))
  
  axiom bool_eq_rev : ( forall a b : map
                      [].( forall a__first a__last b__first b__last : int
                         [].(((bool_eq b b__first b__last a a__first a__last)
                                = True) ->
                               ((if (a__first <= a__last) then
                                ((b__first <= b__last) /\
                                   ((a__last - a__first)
                                      = (b__last - b__first)))
                                 else (b__first > b__last)) /\
                                  ( forall ([mlw:proxy_symbol]
                                  [introduced] temp___idx_105) : int
                                  [].(if
                                     ((a__first <= ([mlw:proxy_symbol]
                                         [introduced] temp___idx_105)) /\
                                        (([mlw:proxy_symbol]
                                           [introduced] temp___idx_105)
                                           <= a__last))
                                     then
                                     ((Standard__character__rep.to_rep
                                         (get a ([mlw:proxy_symbol]
                                            [introduced] temp___idx_105)))
                                        = (Standard__character__rep.to_rep
                                             (get b
                                                ((b__first - a__first)
                                                   + ([mlw:proxy_symbol]
                                                   [introduced] temp___idx_105)))))
                                     ))))))

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__positive
  use        Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer__rep
  
  type component_type  = Standard__character.character
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type string__  = __t
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type string____ref  = { mutable string____content : string__ }
  
  function   string____ref_string____content__projection (a : string____ref)
    requires {  } ensures  {  } returns string__ = a.string____content
  
  meta model_projection function string____ref_string____content__projection
  
  meta inline:no function string____ref_string____content__projection
  
  function   string____havoc (x : string____ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
  
  use import int.Int
  use        Standard__string
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_string (x : _gnatprove_standard.Main.__image s : int)
    requires { True } ensures  { True } returns Standard__string.string__
  
  function   from_string (x : Standard__string.string__) requires { True }
    ensures  { True } returns _gnatprove_standard.Main.__image
  
  axiom to_string__first : ( forall x : _gnatprove_standard.Main.__image
                           [].( forall s : int
                              [(to_string x s)].((Standard__string.first
                                                    (to_string x s)) = 1)))
  
  axiom to_string__length : ( forall x : _gnatprove_standard.Main.__image
                            [].( forall s : int
                               [(to_string x s)].((s >= 0) ->
                                                    ((Standard__string.length
                                                        (to_string x s)) <= s))))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Array__Int__Standard__character
  
  function   index_Index_one () requires { True } ensures  { True } returns
    int = 1
  
  clone export _gnatprove_standard.Array__1__Concat with axiom . type component_type = Array__Int__Standard__character.component_type,
    type map = Array__Int__Standard__character.map, type Index.t = int,
    predicate Index.le = <=, predicate Index.lt = <, predicate Index.gt = >,
    function Index.add = +, function Index.sub = -,
    function Index.one = index_Index_one,
    function get = Array__Int__Standard__character.get

end

(* Module for defining a ref holding the value of variable "counter" defined at main.adb:13, created in Gnat2Why.Decls.Translate_Variable *)
module Main__counter
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val counter [model_trace:857] [model_projected]
  [name:counter] [sloc:main.adb:13]: int

end

(* Module declaring the external object "ada___stm32__device__usart_1," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___stm32__device__usart_1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val usart_1  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___stm32_svd__rcc__rcc_periph," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___stm32_svd__rcc__rcc_periph
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val rcc_periph  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___stm32__board__all_leds," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___stm32__board__all_leds
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val all_leds  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___stm32__device__pb6," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___stm32__device__pb6
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val pb6  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___stm32__device__pb7," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___stm32__device__pb7
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val pb7  : _gnatprove_standard.Main.__private

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at board.ads:6, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Board__init___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Ada___stm32__device__usart_1
  use        Ada___stm32_svd__rcc__rcc_periph
  use        Ada___stm32__board__all_leds
  use        Ada___stm32__device__pb6
  use        Ada___stm32__device__pb7
  use        Ada___stm32__device__usart_1
  use        Ada___stm32_svd__rcc__rcc_periph
  
  function   init (__void_param : unit) requires { True } ensures  { True }
    returns unit

end

(* Module declaring the external object "ada___stm32__device__pd12," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___stm32__device__pd12
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val pd12  : _gnatprove_standard.Main.__private

end

(* Module for declaring a program function (and possibly an axiom) for "toggle_green_led" defined at board.ads:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Board__toggle_green_led___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Ada___stm32__device__pd12
  
  function   toggle_green_led (__void_param : unit) requires { True }
    ensures  { True } returns unit

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at board.ads:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Board__put___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__string
  use        Ada___stm32__device__usart_1
  use        Ada___stm32__device__usart_1
  
  function   put (s : Standard__string.string__) requires { True } ensures 
    { True } returns unit

end

(* Module for axiomatizing type "priority" defined at system.ads:127, created in Gnat2Why.Types.Translate_Type *)
module System__priority
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type priority  = <range 0 240>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 240
  
  function [GP_Inline]  in_range (x : int) requires { True } ensures 
    { True } returns
     = (([GP_Pretty_Ada:-1] (first <= x)) /\ ([GP_Pretty_Ada:-2] (x <= last)))
  
  clone export ada__model.Static_Discrete with axiom . type t = priority,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type priority__ref  = { mutable priority__content : priority }
  
  function   priority__ref_priority__content__projection (a : priority__ref)
    requires {  } ensures  {  } returns priority = a.priority__content
  
  meta model_projection function priority__ref_priority__content__projection
  
  meta inline:no function priority__ref_priority__content__projection
  
  function   priority__havoc (x : priority__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "small" defined at main.adb:12, created in Gnat2Why.Types.Translate_Type *)
module Main__small
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type small  = <range 0 1000>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1000
  
  function [GP_Inline]  in_range (x : int) requires { True } ensures 
    { True } returns
     = (([GP_Pretty_Ada:-1] (first <= x)) /\ ([GP_Pretty_Ada:-2] (x <= last)))
  
  clone export ada__model.Static_Discrete with axiom . type t = small,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type small__ref  = { mutable small__content : small }
  
  function   small__ref_small__content__projection (a : small__ref) requires
    {  } ensures  {  } returns small = a.small__content
  
  meta model_projection function small__ref_small__content__projection
  
  meta inline:no function small__ref_small__content__projection
  
  function   small__havoc (x : small__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "small" defined at main.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__small___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Main__small
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_193) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_189) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_190) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_191) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_192) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_189) = True) \/
          (Main__small.first <= Main__small.last))
       then
       (Main__small.dynamic_property Main__small.first Main__small.last
          ([mlw:proxy_symbol] [introduced] temp___expr_193))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_194) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_195) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining the loop exit exception for the loop "L_1" defined at main.adb:18, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  exception L_1 

end

(* Module for defining a value for string literal  defined at main.adb:23, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_197
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_197 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_197__def_axiom : ( forall __void_param : unit
                                               [(temp___String_Literal_197
                                                   __void_param)].(((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_197
                                                                    __void_param)
                                                                    1)) = 93)
                                                                    /\
                                                                    ((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_197
                                                                    __void_param)
                                                                    2)) = 32)
                                                                    /\
                                                                    ((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_197
                                                                    __void_param)
                                                                    3)) = 32)
                                                                    /\
                                                                    ((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_197
                                                                    __void_param)
                                                                    4)) = 104)
                                                                    /\
                                                                    ((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_197
                                                                    __void_param)
                                                                    5)) = 101)
                                                                    /\
                                                                    ((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_197
                                                                    __void_param)
                                                                    6)) = 108)
                                                                    /\
                                                                    ((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_197
                                                                    __void_param)
                                                                    7)) = 108)
                                                                    /\
                                                                    ((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_197
                                                                    __void_param)
                                                                    8)) = 111)
                                                                    /\
                                                                    ((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_197
                                                                    __void_param)
                                                                    9)) = 44)
                                                                    /\
                                                                    ((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_197
                                                                    __void_param)
                                                                    10)) = 32)
                                                                    /\
                                                                    ((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_197
                                                                    __void_param)
                                                                    11))
                                                                    = 119) /\
                                                                    ((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_197
                                                                    __void_param)
                                                                    12))
                                                                    = 111) /\
                                                                    ((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_197
                                                                    __void_param)
                                                                    13))
                                                                    = 114) /\
                                                                    ((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_197
                                                                    __void_param)
                                                                    14))
                                                                    = 108) /\
                                                                    ((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_197
                                                                    __void_param)
                                                                    15))
                                                                    = 100) /\
                                                                    ((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_197
                                                                    __void_param)
                                                                    16)) = 33)))

end

(* Module for defining a value for string literal  defined at main.adb:23, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_198
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_198 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_198__def_axiom : ( forall __void_param : unit
                                               [(temp___String_Literal_198
                                                   __void_param)].((Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (temp___String_Literal_198
                                                                    __void_param)
                                                                    1)) = 91))

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_88) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_84) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_85) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_86) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_87) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_84) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_88))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_89) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_90) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Standard__string
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_110) : Standard__string.string__
    ([mlw:proxy_symbol] [introduced] temp___is_init_106) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_107) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_108) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_109) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_107) then
       True  else
       (Standard__string.dynamic_property Standard__positive.first
          Standard__positive.last
          (Standard__string.first ([mlw:proxy_symbol]
             [introduced] temp___expr_110))
          (Standard__string.last ([mlw:proxy_symbol]
             [introduced] temp___expr_110))))

end

(* Module giving an empty axiom for the entity "counter" defined at main.adb:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__counter___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_1" defined at main.adb:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "priority" defined at system.ads:127, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        System__priority
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_179) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_175) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_176) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_177) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_178) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_175) = True) \/
          (System__priority.first <= System__priority.last))
       then
       (System__priority.dynamic_property System__priority.first
          System__priority.last ([mlw:proxy_symbol]
          [introduced] temp___expr_179))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_180) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_181) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for checking contracts and absence of run-time errors in subprogram "main" defined at main.adb:7, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Integer
  use        Standard_String__Img
  use        Standard__integer
  use        Standard__positive
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character__Concat
  use        Standard__string
  use        Main__counter
  use        Board__init___axiom
  use        Board__toggle_green_led___axiom
  use        Board__put___axiom
  use        System__priority
  use        Main__small
  use        Main__small___axiom
  use        Main__L_1
  use        Temp___String_Literal_197
  use        Array__Int__Standard__character
  use        Temp___String_Literal_198
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer___axiom
  use        Standard__positive___axiom
  use        Standard__character___axiom
  use        Standard__string___axiom
  use        Standard__integer___axiom
  use        Main__small___axiom
  use        Main__counter___axiom
  use        Main__L_1___axiom
  use        System__priority___axiom
  use        Board__init___axiom
  use        Board__put___axiom
  use        Board__toggle_green_led___axiom
  
  function  [sloc:main.adb:7] def (__void_param : unit) requires { True }
    ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram main.adb:7 *);
        (* Assume moved pointers in outputs of the subprogram main.adb:7 *);
        (* Check for RTE in the Pre of the subprogram main.adb:7 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram main.adb:7 *);
        (try
        ();
          ([sloc:main.adb:8] ());
          ([sloc:main.adb:10] check
          { ([sloc:main.adb:10] ([GP_Shape:pragargs] [vc:annotation]
                                [GP_Check:0:VC_RANGE_CHECK:main.adb:10:36] (
                                (System__priority.first <= 0) /\
                                  (0 <= System__priority.last)))) });
          ([sloc:main.adb:12] ());
          ([sloc:main.adb:13] ( Main__counter.counter := ( 0));
          assume
          { (Main__small___axiom.dynamic_invariant !Main__counter.counter
               True False True True) });
          ([sloc:main.adb:18] ());
          ();
          ([sloc:main.adb:16] ());
          ([sloc:main.adb:16] ( any --pp_effects NOT IMPLEMENTED pre {} post
          {} return unit);
          (Board__init___axiom.init ());
          ());
        ([sloc:main.adb:18] (* Translation of an Ada loop from main.adb:18 *);
        (if True then
        (try
        (* While loop translating the Ada loop from main.adb:18 *);
          ([sloc:main.adb:18] loop
                                (* Check for absence of RTE in the loop invariant and variant *)
                                
                                
                                (* Assume implicit invariants from the loop main.adb:18 *);
                                assume
                                { (True /\
                                     (Main__small___axiom.dynamic_invariant
                                        !Main__counter.counter True True True
                                        True) /\ True /\ True) };
                                (* Continuation of loop after loop invariant and variant *);
                                ();
                                ([sloc:main.adb:22] ());
                                ([sloc:main.adb:22] ( any
                                                       --pp_effects NOT IMPLEMENTED
                                                       pre {}
                                post {} return unit);
                                (Board__toggle_green_led___axiom.toggle_green_led
                                   ());
                                ());
          ([sloc:main.adb:23] ());
          ([sloc:main.adb:23] ( any --pp_effects NOT IMPLEMENTED pre {} post
          {} return unit);
          (Board__put___axiom.put (let ([mlw:proxy_symbol]
             [introduced] temp___204) = 13 in (let ([mlw:proxy_symbol]
             [introduced] temp___203) =
             (let ([mlw:proxy_symbol] [introduced] temp___202) =
               (Temp___String_Literal_197.temp___String_Literal_197 ()) in
               (let ([mlw:proxy_symbol] [introduced] temp___201) =
               (let ([mlw:proxy_symbol] [introduced] temp___200) =
                 (Standard_String__Img.to_string
                    (Standard__integer.attr__ATTRIBUTE_IMAGE
                       !Main__counter.counter) 12) in
                 (let ([mlw:proxy_symbol] [introduced] temp___199) =
                 (Temp___String_Literal_198.temp___String_Literal_198 ()) in
                 (Standard__string.of_array
                    (Array__Int__Standard__character__Concat.concat
                       ([mlw:proxy_symbol] [introduced] temp___199) 1 1
                       (Standard__string.to_array ([mlw:proxy_symbol]
                          [introduced] temp___200))
                       (Standard__string.first ([mlw:proxy_symbol]
                          [introduced] temp___200))
                       (Standard__string.last ([mlw:proxy_symbol]
                          [introduced] temp___200))) 1
                    ([sloc:main.adb:23] ([GP_Shape:L_1_loop__call_put__concat__concat__concat]
                                        [vc:annotation]
                                        [GP_Check:1:VC_RANGE_CHECK:main.adb:23:22] (
                                        Standard__positive.range_check_
                                          ((1
                                              + ((_gnatprove_standard.Integer.length
                                                    1 1)
                                                   + (_gnatprove_standard.Integer.length
                                                        (Standard__string.first
                                                           ([mlw:proxy_symbol]
                                                           [introduced] temp___200))
                                                        (Standard__string.last
                                                           ([mlw:proxy_symbol]
                                                           [introduced] temp___200)))))
                                             - 1))))))) in
               (if
               ((Standard__string.length ([mlw:proxy_symbol]
                   [introduced] temp___201)) = 0)
               then
               (Standard__string.of_array ([mlw:proxy_symbol]
                  [introduced] temp___202) 1 16)
                else
               (Standard__string.of_array
                  (Array__Int__Standard__character__Concat.concat
                     (Standard__string.to_array ([mlw:proxy_symbol]
                        [introduced] temp___201))
                     (Standard__string.first ([mlw:proxy_symbol]
                        [introduced] temp___201))
                     (Standard__string.last ([mlw:proxy_symbol]
                        [introduced] temp___201)) ([mlw:proxy_symbol]
                     [introduced] temp___202) 1 16)
                  (Standard__string.first ([mlw:proxy_symbol]
                     [introduced] temp___201))
                  ([sloc:main.adb:23] ([vc:annotation]
                                      [GP_Check:2:VC_RANGE_CHECK:main.adb:23:47]
                                      [GP_Shape:L_1_loop__call_put__concat__concat] (
                                      Standard__positive.range_check_
                                        (((Standard__string.first
                                             ([mlw:proxy_symbol]
                                             [introduced] temp___201))
                                            + ((_gnatprove_standard.Integer.length
                                                  (Standard__string.first
                                                     ([mlw:proxy_symbol]
                                                     [introduced] temp___201))
                                                  (Standard__string.last
                                                     ([mlw:proxy_symbol]
                                                     [introduced] temp___201)))
                                                 + (_gnatprove_standard.Integer.length
                                                      1 16))) - 1)))))))) in
             (if
             ((Standard__string.length ([mlw:proxy_symbol]
                 [introduced] temp___203)) = 0)
             then
             (Standard__string.of_array
                (Array__Int__Standard__character__Concat.singleton
                   (Standard__character__rep.of_rep ([mlw:proxy_symbol]
                      [introduced] temp___204)) Standard__positive.first)
                Standard__positive.first Standard__positive.first)
              else
             (Standard__string.of_array
                (Array__Int__Standard__character__Concat.concat_singleton_right
                   (Standard__string.to_array ([mlw:proxy_symbol]
                      [introduced] temp___203))
                   (Standard__string.first ([mlw:proxy_symbol]
                      [introduced] temp___203))
                   (Standard__string.last ([mlw:proxy_symbol]
                      [introduced] temp___203))
                   (Standard__character__rep.of_rep ([mlw:proxy_symbol]
                      [introduced] temp___204)))
                (Standard__string.first ([mlw:proxy_symbol]
                   [introduced] temp___203))
                ([sloc:main.adb:23] ([GP_Shape:L_1_loop__call_put__concat]
                                    [vc:annotation]
                                    [GP_Check:3:VC_RANGE_CHECK:main.adb:23:68] (
                                    Standard__positive.range_check_
                                      (((Standard__string.first
                                           ([mlw:proxy_symbol]
                                           [introduced] temp___203))
                                          + ((_gnatprove_standard.Integer.length
                                                (Standard__string.first
                                                   ([mlw:proxy_symbol]
                                                   [introduced] temp___203))
                                                (Standard__string.last
                                                   ([mlw:proxy_symbol]
                                                   [introduced] temp___203)))
                                               + 1)) - 1)))))))));
          ());
          ([sloc:main.adb:26] ());
          ([sloc:main.adb:26] ());
          ([sloc:main.adb:26] ( Main__counter.counter :=
          ( ([sloc:main.adb:26] ([GP_Shape:L_1_loop__counter_assign__add]
                                [vc:annotation]
                                [GP_Check:4:VC_RANGE_CHECK:main.adb:26:26] (
                                Main__small.range_check_
                                  (!Main__counter.counter + 1)))))));
          (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:18 *);
          (if False then raise Main__L_1.L_1 )
           end loop) with
        | Main__L_1.L_1  -> ()) ));
  raise Return__exc with | Return__exc  -> ());
abstract ensures
{ True } begin  (let _ = True in ())  end

end
